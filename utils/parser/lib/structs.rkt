#lang racket
(provide 
  (struct-out Var)
  (struct-out Int)
  (struct-out Bool)
  (struct-out Str)
  (struct-out Op)
  (struct-out Empty)
  (struct-out If)
  (struct-out Let)
  (struct-out Apply)
  (struct-out Lambda)
  (struct-out Def)
  (struct-out Program)
  (all-defined-out)
)

(struct Var (v) #:transparent)
(struct Int (n) #:transparent)
(struct Bool (b) #:transparent)
(struct Str (s) #:transparent)
(struct Op (o) #:transparent)
(struct Empty () #:transparent)
(struct If (con consq alter) #:transparent)
(struct Let (v val body) #:transparent)
(struct Apply (fn args) #:transparent)
(struct Lambda (p-ls body) #:transparent)
(struct Def (fn-name p-ls body) #:transparent)
(struct Program (def-ls exp-ls) #:transparent)

(define op-ls '(+ - * cons eq? and or not < > car cdr))
(define (op? o)
  (member o op-ls))
